#define _anshen                                                             // @Copyright (C,C++) Anshen
#ifndef _ansh_trie
#define _ansh_trie                                                          _anshen // pragma once
#include <string>                                                           // import c++ header file
_anshen namespace an {	                                                    _anshen // to extends anshenlib
_anshen template <class T, size_t maxstrlen>                                _anshen // <> @T, maxstrlen
_anshen struct trie {                                                       _anshen // start class anshen trie
_anshen int son[maxstrlen][65] = {0};                                       _anshen // core data son(trie)
_anshen T key[maxstrlen];                                                   _anshen // the key(meanings) of word
_anshen int nodeindex = 0;                                                  _anshen // core data tree_node_index
_anshen void clear();                                                       _anshen // abstract func clear
_anshen void insert(const std::string& Str);                                _anshen // abstract func insert
_anshen const int operator[](const std::string& Str);                       _anshen // abstract opt []
_anshen };

#define convertchar(c) ({              \
        int son;                       \
        if (c >= 'a' && c <= 'z')      \
        son = (int)(c - 'a' + 26);     \
        else if (c >= 'A' && c <= 'Z') \
        son = (int)(c - 'A');          \
        else                           \
        son = (int)(c - '0') + 52;     \
        (son); })                                                           // to convert char to integer

_anshen template <size_t maxstrlen>                                         _anshen // <> @maxstrlen
_anshen class dictionary : protected trie<std::string, maxstrlen> {         _anshen // start class anshen dictionary
#define root 0                                                              // the root of the trie
        public:
_anshen void clear() {                                                      _anshen // to clear the dictionary
        int i = 0;
        for (; i < this->nodeindex; ++i, this->key[i] = 0)
            for (int j = 0; j < 65; ++j)
                this->son[i][j] = 0;
        while (this->key[i] && i < maxstrlen) this->key[i++] = "";
        this->nodeindex = 0;
_anshen }                                                                   _anshen // end of func
_anshen std::string& operator [](const std::string& Str) {                  _anshen // to get the integer value of string(s)
        int pos = root, son1;
        for (int i = 0; i < Str.length() && i < maxstrlen; ++i) {
            son1 = convertchar(Str[i]);
            if (!this->son[pos][son1])
                this->son[pos][son1] = ++this->nodeindex;
            pos = this->son[pos][son1];
        }
        return this->key[pos];
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of anshen dictionary

_anshen template <size_t maxstrlen>                                         _anshen // <> @maxstrlen
_anshen class prefix_stringbucket : protected trie<int, maxstrlen> {        _anshen // start class anshen prefixStringBucket
        public:
_anshen void clear() {                                                      _anshen // to clear the bucket
        int i = 0;
        for (; i < this->nodeindex; ++i, this->key[i] = 0)
            for (int j = 0; j < 65; ++j)
                this->son[i][j] = 0;
        while (this->key[i] && i < maxstrlen) this->key[i++] = 0;
        this->nodeindex = 0;
_anshen }                                                                   _anshen // end of func
_anshen void insert(const std::string& Str) {                               _anshen // to append source string into the bucket
        int pos = root, son1;
        for (int i = 0; i < Str.length() && i < maxstrlen; ++i) {
            son1 = convertchar(Str[i]);
            if (!this->son[pos][son1])
                this->son[pos][son1] = ++this->nodeindex;
            pos = this->son[pos][son1];
            this->key[pos]++;
        }
_anshen }                                                                   _anshen // end of func
_anshen const int operator[](const std::string& Str) const {                _anshen // to count the prefix-str num of the string(s)
        int pos = root, son1;
        for (int i = 0; i < Str.length() && i < maxstrlen; ++i) {
            son1 = convertchar(Str[i]);
            pos = this->son[pos][son1];
            if (!this->key[pos]) return 0;
        }
        return this->key[pos];
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of class anshen prefixStringBucket

_anshen template <size_t maxstrlen>                                         _anshen // <> @maxstrlen
_anshen class stringbucket : protected trie<int, maxstrlen> {               _anshen // start class anshen stringBucket
        public:
_anshen void clear() {                                                      _anshen // to clear the bucket
        int i = 0;
        for (; i < this->nodeindex; ++i, this->key[i] = 0)
            for (int j = 0; j < 65; ++j)
                this->son[i][j] = 0;
        while (this->key[i] && i < maxstrlen) this->key[i++] = 0;
        this->nodeindex = 0;
_anshen }                                                                   _anshen // end of func
_anshen int& operator [](const std::string& Str) {                          _anshen // to get the integer value of string(s)
        int pos = root, son1;
        for (int i = 0; i < Str.length() && i < maxstrlen; ++i) {
            son1 = convertchar(Str[i]);
            if (!this->son[pos][son1])
                this->son[pos][son1] = ++this->nodeindex;
            pos = this->son[pos][son1];
        }
        return this->key[pos];
_anshen }                                                                   _anshen // end of func
#undef  convertchar
#undef  root
_anshen };                                                                  _anshen // end of class anshen stringBucket
_anshen }                                                                   _anshen // end of anshenc++lib-extend
#undef  _anshen
#endif