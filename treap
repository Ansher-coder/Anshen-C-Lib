#define _anshen                                                             // @Copyright (C,C++) Anshen
#ifndef _ansh_treap
#define _ansh_treap                                                         _anshen // pragma once
#include <stdlib.h>                                                         // import c++ header file
_anshen namespace an {	                                                    _anshen // to extends anshenlib
#define size_t unsigned int
_anshen template <class T, size_t maxnode>                                  _anshen // <> @T, maxnode
_anshen struct treap {                                                      _anshen // start class anshen treap (abstract)
#define null 0                                                              // null node index
_anshen struct node {                                                       _anshen // start class treap subclass node
_anshen size_t lson = null, rson = null;                                    _anshen // core member left_son and right_son
_anshen size_t size = 0;                                                    _anshen // the size of the treesize of node as root
_anshen size_t tag = 0, key = 0;                                            _anshen // the lazy_tag and hash_key (priority) of treap
_anshen T val = 0;                                                          _anshen // the value of the node
_anshen } tree[maxnode + 1];                                                _anshen // the maxnode num of treap
_anshen size_t nodeindex = 0, this_root = 0;                                _anshen // the inner counter
_anshen size_t newnode(T value) {                                           _anshen // generate a new node
        if (nodeindex == maxnode) throw "treap is full";
        ++nodeindex;                                                        // nodeindex must be > 0, as 0 is null
        tree[nodeindex].val = value;
        tree[nodeindex].size = 1;                                           // default size is 1
        tree[nodeindex].key = rand();                                       // use rand to set key, so that the tree will be a balanced one
        return nodeindex;
_anshen }                                                                   _anshen // end of func
_anshen static void setrandseed(size_t seed) { srand(seed); }               _anshen // for user to set rand seed
_anshen size_t size() { return tree[this_root].size; }                      _anshen // get the size of the whole treap
_anshen void clear() {  nodeindex = 0; }                                    _anshen // clear the whole treap
_anshen void pushdown(size_t);                                              _anshen // pushdown the tag (abstract)
_anshen void pushup(size_t);                                                _anshen // pushup, used for updating (abstract)
_anshen size_t merge(size_t, size_t);                                       _anshen // merge the two tree by root (abstract)
_anshen void split(size_t, T, size_t&, size_t&);                            _anshen // split the tree (abstract)
_anshen };                                                                  _anshen // end of class anshen treap (abstract)

_anshen template <size_t maxarrlen>                                         _anshen // <> @maxarrlen 
_anshen class array_index_reverser : protected treap<size_t, maxarrlen> {   _anshen // start class anshen array(index) reverser
_anshen void pushdown(size_t rt) {                                          _anshen // to override the pushdown
        size_t temp = this->tree[rt].lson;
        this->tree[rt].lson = this->tree[rt].rson;
        this->tree[rt].rson = temp;
        this->tree[this->tree[rt].lson].tag ^= 1;                           // tag = 1 for reverse, 0 for do nothing
        this->tree[this->tree[rt].rson].tag ^= 1;                           // so use xor to tag, reverse twice means to do nothing
        this->tree[rt].tag = 0;
_anshen }                                                                   _anshen // end of func
_anshen void pushup(size_t rt) {                                            _anshen // to override the pushup
        this->tree[rt].size = this->tree[this->tree[rt].lson].size +
        this->tree[this->tree[rt].rson].size + 1;
_anshen }                                                                   _anshen // end of func
_anshen size_t merge(size_t lrt, size_t rrt) {                              _anshen // to override the merge
        if (lrt == null || rrt == null)
            return this->this_root = lrt + rrt;                             // if link to null_node, link to it directly
        if (this->tree[lrt].key < this->tree[rrt].key) {                    // make sure the smaller key node will be at the upper layer
            if (this->tree[lrt].tag) pushdown(lrt);                         // pushdown the tag before merging
            this->tree[lrt].rson = merge(this->tree[lrt].rson, rrt);
            pushup(lrt);                                                    // pushup to update after merging
            return this->this_root = lrt;
        } else {
            if (this->tree[rrt].tag) pushdown(rrt);
            this->tree[rrt].lson = merge(lrt, this->tree[rrt].lson);
            pushup(rrt);
            return this->this_root = rrt;
        }
_anshen }                                                                   _anshen // end of func
_anshen void split(size_t rt, size_t sz, size_t &lrt, size_t &rrt) {        _anshen // to override the split
        if (rt == null) return lrt = rrt = null, void();                    // lrt tree will have the nodes whose value <= sz, while rrt >= sz
        if (this->tree[rt].tag) pushdown(rt);                               // pushdown tag first before any operation
        if (this->tree[this->tree[rt].lson].size + 1 <= sz) {               // the elems are indexs, so they are in the same tree, use size to split
            lrt = rt;                                                       // now lrt will have the node (1, 2, ... sz - 1, sz) all <= sz
            size_t rsz = sz - this->tree[this->tree[rt].lson].size - 1;     // get the size range in rson (sz - lson_size)
            split(this->tree[rt].rson, rsz, this->tree[rt].rson, rrt);
        } else {
            rrt = rt;
            split(this->tree[rt].lson, sz, lrt, this->tree[rt].lson);
        }
        pushup(rt);
_anshen }                                                                   _anshen // end of func
_anshen size_t ans_index_list[maxarrlen], it = 0;                           _anshen // output member anslist and iterator
_anshen void writedown(size_t index) { ans_index_list[it++] = index; }      _anshen // write down the anslist
_anshen void traversal(size_t rt) {                                         _anshen // to traversal the tree
        if (this->tree[rt].tag) pushdown(rt);
        if (this->tree[rt].lson) traversal(this->tree[rt].lson);
        writedown(this->tree[rt].val);
        if (this->tree[rt].rson) traversal(this->tree[rt].rson);
_anshen }                                                                   _anshen // end of func
        public:
_anshen using treap<size_t, maxarrlen>::setrandseed;                        _anshen // use the set rand seed func
_anshen array_index_reverser(size_t arrlen = maxarrlen) {                   _anshen // init the treap
        for (size_t i = it = 0; i < arrlen; ++i)
            this->merge(this->this_root, this->newnode(i));
_anshen }                                                                   _anshen // end of func
_anshen void reverse(size_t lbound, size_t rbound) {                        _anshen // reverse the range from lbound to rbound: [loound, rbound]
        if (lbound >= rbound) return;
        if (lbound >= maxarrlen || rbound >= maxarrlen) return;
        size_t lrt, prt, rrt;
        split(this->this_root, rbound + 1, lrt, rrt);
        split(lrt, lbound, lrt, prt);
        this->tree[prt].tag ^= 1;                                           // prt will have the node (lbound, lbound + 1, ..., rbound)
        merge(merge(lrt, prt), rrt);
_anshen }                                                                   _anshen // end of func
_anshen operator const size_t*() {                                          _anshen // return anslist
        if (it == 0) traversal(this->this_root);
        return ans_index_list;
_anshen }                                                                   _anshen // end of func
_anshen size_t operator[](size_t index) {                                   _anshen // get the index of anslist
        if (index >= maxarrlen) throw "range index error";
        if (it == 0) traversal(this->this_root);
        return ans_index_list[index];
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of class anshen array_index_reverser

_anshen template <class T, size_t maxarrlen>                                _anshen // <> @T, maxnode
_anshen class array_querier : protected treap<T, maxarrlen> {               _anshen // start class anshen array_querier
_anshen void pushup(size_t rt) {                                            _anshen // to override the pushup
        this->tree[rt].size = this->tree[this->tree[rt].lson].size +
        this->tree[this->tree[rt].rson].size + 1;
_anshen }                                                                   _anshen // end of func
_anshen size_t merge(size_t lrt, size_t rrt) {                              _anshen // to override the merge
        if (lrt == null || rrt == null)
            return this->this_root = lrt + rrt;                             // if link to null_node, link to it directly
        if (this->tree[lrt].key < this->tree[rrt].key) {                    // make sure the smaller key node will be at the upper layer
            this->tree[lrt].rson = merge(this->tree[lrt].rson, rrt);
            pushup(lrt);                                                    // pushup to update after merging
            return this->this_root = lrt;
        } else {
            this->tree[rrt].lson = merge(lrt, this->tree[rrt].lson);
            pushup(rrt);
            return this->this_root = rrt;
        }
_anshen }                                                                   _anshen // end of func
_anshen void split(size_t rt, T val, size_t &lrt, size_t &rrt) {            _anshen // to override the split
        if (rt == null) return lrt = rrt = null, void();                    // lrt tree will have the nodes whose value <= val, while rrt >= val
        if (this->tree[rt].val <= val) {                                    // the elems are value, split default <= val
            lrt = rt;                                                       // now lrt will have the node all <= val
            split(this->tree[rt].rson, val, this->tree[rt].rson, rrt);      // get the size range in rson (sz - lson_size)
        } else {
            rrt = rt;
            split(this->tree[rt].lson, val, lrt, this->tree[rt].lson);
        }
        pushup(rt);
_anshen }                                                                   _anshen // end of func
_anshen void split_r(size_t rt, T val, size_t &lrt, size_t &rrt) {          _anshen // to extends the split, let lrt has node value < val
        if (rt == null) return lrt = rrt = null, void();
        if (this->tree[rt].val < val) {                                     // to right-side save lrt
            lrt = rt;
            split_r(this->tree[rt].rson, val, this->tree[rt].rson, rrt);
        } else {
            rrt = rt;
            split_r(this->tree[rt].lson, val, lrt, this->tree[rt].lson);
        }
        pushup(rt);
_anshen }                                                                   _anshen // end of func
_anshen T getelem(size_t rt, size_t rank) {                                 _anshen // get the elem at rank rth
        while (true)
            if (rank <= this->tree[this->tree[rt].lson].size)               // the tree lson value < root value < rson value, use binary search
                rt = this->tree[rt].lson;
            else if (rank == this->tree[this->tree[rt].lson].size + 1)
                return this->tree[rt].val;
            else rank = rank - this->tree[this->tree[rt].lson].size - 1,
                rt = this->tree[rt].rson;
        return (T)null;
_anshen }                                                                   _anshen // end of func
        public:
_anshen using treap<T, maxarrlen>::setrandseed;                             _anshen // use the set rand seed func
_anshen void insert(const T& elem) {                                        _anshen // insert a new node
        size_t lrt = 0, rrt = 0;
        split(this->this_root, elem, lrt, rrt);
        merge(merge(lrt, this->newnode(elem)), rrt);
_anshen }                                                                   _anshen // end of func
_anshen void remove(const T& elem) {                                        _anshen // remove a node
        size_t lrt = 0, prt = 0, rrt = 0;
        split(this->this_root, elem, lrt, rrt);
        split_r(lrt, elem, lrt, prt);
        prt = merge(this->tree[prt].lson, this->tree[prt].lson);            // remove only the prt itself and save its sons
        merge(merge(lrt, prt), rrt);
_anshen }                                                                   _anshen // end of func
_anshen T elem_at_rank(size_t rank) {                                       _anshen // get elem at the rank rth
        if (rank == 0 || rank > this->size()) return (T)null;
        return getelem(this->this_root, rank);
_anshen }                                                                   _anshen // end of func
_anshen T pre_of_elem(T elem) {                                             _anshen // get pre node(elem) of the elem
        size_t rank = rank_of_elem(elem);
        if (rank == 0 || rank == 1) return (T)null;
        return elem_at_rank(rank - 1);
_anshen }                                                                   _anshen // end of func
_anshen T post_of_elem(T elem) {                                            _anshen // get post node(elem) of the elem
        size_t rank = rank_of_elem(elem);
        if (rank == 0 || rank == this->size()) return (T)null;
        return elem_at_rank(rank + 1);
_anshen }                                                                   _anshen // end of func
_anshen size_t rank_of_elem(T elem) {                                       _anshen // get the rank of elem, 0 means not existing
        size_t lrt = 0, prt = 0, rrt = 0;
        split(this->this_root, elem, lrt, rrt);
        split_r(lrt, elem, lrt, prt);
        if (this->tree[prt].val != elem)
            return merge(merge(lrt, prt), rrt), 0;                          // not exist, return 0
        size_t ret = this->tree[lrt].size + 1;
        merge(merge(lrt, prt), rrt);
        return ret;
_anshen }                                                                   _anshen // end of func
#undef  null
_anshen };
#undef  size_t
_anshen }                                                                   _anshen // end of anshenc++lib-extend
#undef  _anshen
#endif