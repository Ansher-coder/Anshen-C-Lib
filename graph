#define _anshen                                                             // @Copyright (C,C++) Anshen
#ifndef _ansh_graph
#define _ansh_graph                                                         _anshen // pragma once
_anshen namespace an {                                                      _anshen // to extends anshenlib
#define size_t unsigned int
_anshen template <class T>                                                  _anshen // <> @T
_anshen struct edgetype {                                                   _anshen // start class anshen edgetype
_anshen size_t node_index;                                                  _anshen // node index
_anshen T dist_value;                                                       _anshen // dist value
_anshen };                                                                  _anshen // end of class anshen edgetype

_anshen template <class T>                                                  _anshen // <> @T
_anshen class edgeset {                                                     _anshen // start class anshen edgeset
_anshen T *node = nullptr;                                                  _anshen // inner node array
_anshen size_t edgenum = 0;                                                 _anshen // edgenum
_anshen size_t nowsize = 0;                                                 _anshen // the real size of edgeset
_anshen bool memextend_mode = true;                                         _anshen // memory extending mode : true for large and false for small
_anshen void memextend() {                                                  _anshen // memory check and extends
        if (nowsize > edgenum) return;
        size_t newsize = 0;
        if (memextend_mode == true) newsize = nowsize << 1;                 // large extending mode
        else newsize = nowsize + 1;                                         // small extending mode
        if (newsize == 0) newsize = 1;
        T *newnode = new T[newsize];
        if (newnode == nullptr) throw "memory is not enough";
        for (size_t i = 0; i < edgenum; ++i) newnode[i] = node[i];
        delete[] node;
        node = newnode, nowsize = newsize;
_anshen }                                                                   _anshen // end of func
        public:
_anshen void memextend_preference(bool largemode = false) {                 _anshen // set preference for memory ectending
        memextend_mode = largemode;
_anshen }                                                                   _anshen // end of func
_anshen void insert(size_t nodeindex) {                                     _anshen // insert an edge
        memextend();
        node[edgenum++] = nodeindex;
_anshen }                                                                   _anshen // end of func
_anshen T operator[](size_t index) const {                                  _anshen // edgeset opt []
        if (index >= edgenum) throw "edge array index error";
        return node[index];
_anshen }                                                                   _anshen // end of func
_anshen size_t size() { return edgenum; }                                   _anshen // to get the size
_anshen void clear() { edgenum = 0; }                                       _anshen // clear the edgeset
_anshen ~edgeset() { delete[] node; }                                       _anshen // destruction
_anshen };                                                                  _anshen // end of class anshen edgeset
_anshen using edgeset_nodis = edgeset<size_t>;                              _anshen // no-dis edgeset

#define trav(_i, _E) for (int _i = 0; _i < _E.size(); ++_i)                 // easy for-loop for edgeset

_anshen template <size_t _node, size_t _arcs>                               _anshen // <> @_node, _arcs
_anshen class graph {                                                       _anshen // start class anshen graph
_anshen size_t arcs, arc_head[_node];                                       _anshen // core storage arcs and archead
_anshen struct Graph_Arc_Node { size_t next, node; } arc[_arcs << 1];       _anshen // core arcset
        public:
_anshen constexpr size_t& head_arc   (size_t i) { return arc_head[i]; }     _anshen // get headarc of a node
_anshen constexpr size_t& operator >>(size_t i) { return arc[i].next; }     _anshen // to travel to the next arc index
_anshen constexpr size_t& operator [](size_t i) { return arc[i].node; }     _anshen // get the node index
_anshen void clear() {                                                      _anshen // clear the graph
        arcs = 0;
        for (size_t i = 0; i < _node; ++i)
            arc_head[i] = 0;
_anshen }                                                                   _anshen // end of func
_anshen void addarc(size_t u, size_t v) {                                   _anshen // addarc into the graph
        arc[++arcs].node = v;
        arc[arcs].next = arc_head[u];
        arc_head[u] = arcs;
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of class anshen graph

_anshen template <size_t _node, size_t _arcs, class T>                      _anshen // <> @_node, _arcs, T 
_anshen class graph_dis {                                                   _anshen // start class anshen graph
_anshen size_t arcs, arc_head[_node];                                       _anshen // core storage arcs and archead
_anshen struct Graph_Arc_Node {                                             _anshen // core arcset
_anshen size_t next, node; T dist;                                          _anshen // core member of sub class
_anshen } arc[_arcs << 1];                                                  _anshen // end of subclass
        public:
_anshen constexpr size_t& head_arc   (size_t i) { return arc_head[i]; }     _anshen // get headarc of a node
_anshen constexpr size_t& operator >>(size_t i) { return arc[i].next; }     _anshen // to travel to the next arc index
_anshen constexpr size_t& operator [](size_t i) { return arc[i].node; }     _anshen // get the node index
_anshen constexpr      T& operator ()(size_t i) { return arc[i].dist; }     _anshen // get the arc dist value
_anshen void clear() {                                                      _anshen // clear the graph
        arcs = 0;
        for (size_t i = 0; i < _node; ++i)
            arc_head[i] = 0;
_anshen }                                                                   _anshen // end of func
_anshen void addarc(size_t u, size_t v, T dis) {                            _anshen // addarc into the graph
        arc[++arcs].node = v;
        arc[arcs].next = arc_head[u];
        arc[arc_head[u] = arcs].dist = dis;
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of class anshen graph

#define gfor(_i, _G, _h) for (int _i = _G.head_arc(_h); _i; _i = _G >> _i)  // easy for-loop for graph

#undef  size_t
_anshen }                                                                   _anshen // end of anshenc++lib-extend
#undef  _anshen
#endif