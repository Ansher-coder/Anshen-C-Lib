#define _anshen                                                             // @Copyright (C,C++) Anshen
#ifndef _ansh_number
#define _ansh_number                                                        _anshen // pragma once
#include <type_traits>                                                      // import c++ header file
_anshen namespace an {	                                                    _anshen // to extends anshenlib
_anshen using u16 = unsigned short;                                         _anshen // 16 bits natural number
_anshen using u32 = unsigned int;                                           _anshen // 32 bits natural number
_anshen using u64 = unsigned long long;                                     _anshen // 64 bits natural number
_anshen template <u32 mod, class T = u32>                                   _anshen // <> @mod, T
_anshen class number {                                                      _anshen // start class of anshen natural_number with mod
_anshen static_assert(std::is_integral<T>::value);                          _anshen // type check: is integer?
_anshen static_assert(!std::is_signed<T>::value);                           _anshen // type check: not has sign?
_anshen T value = 0;                                                        _anshen // inner value
        public:
_anshen number() {}                                                         _anshen // constructor
_anshen number(T value) : value(value) {}                                   _anshen // constructor
_anshen bool operator<(const number& rhs) const {                           _anshen // number opt <
        return value < rhs.value;
_anshen }                                                                   _anshen // end of func
_anshen bool operator>(const number& rhs) const {                           _anshen // number opt >
        return value > rhs.value;
_anshen }                                                                   _anshen // number opt <=
_anshen bool operator<=(const number& rhs) const {                          _anshen // end of func
        return value <= rhs.value;
_anshen }                                                                   _anshen // end of func
_anshen bool operator>=(const number& rhs) const {                          _anshen // number opt >=
        return value <= rhs.value;
_anshen }                                                                   _anshen // end of func
_anshen bool operator==(const number& rhs) const {                          _anshen // number opt ==
        return value == rhs.value;
_anshen }                                                                   _anshen // end of func
_anshen bool operator!=(const number& rhs) const {                          _anshen // number opt !=
        return value != rhs.value;
_anshen }                                                                   _anshen // end of func
_anshen number operator+(const number &rhs) const {                         _anshen // number opt +
        T ret = value + rhs.value;
        if (ret >= mod) ret -= mod;
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen number &operator+=(const number &rhs) {                             _anshen // number opt +=
        if ((value += rhs.value) >= mod) value -= mod;
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen number operator-() const { return value ? mod - value : value; }    _anshen // number opt -(pre)
_anshen number operator-(const number &rhs) const {                         _anshen // number opt -
        T ret = value - rhs.value;
        if (int(ret) < 0) ret += mod;
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen number &operator-=(const number &rhs) {                             _anshen // number opt -=
        if (int(value -= rhs.value) < 0) value += mod;
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen number operator*(const number &rhs) const {                         _anshen // number opt *
        return T(u64(value) * rhs.value % mod);
_anshen }                                                                   _anshen // end of func
_anshen number &operator*=(const number &rhs) {                             _anshen // number opt *=
        value = u64(value) * rhs.value % mod;
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen number operator/(const number &rhs) const {                         _anshen // number opt /
        return T(u64(value) / (rhs.value % mod));
_anshen }                                                                   _anshen // end of func
_anshen number &operator/=(const number &rhs) {                             _anshen // number opt /=
        value = T(u64(value) / (rhs.value % mod));
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen number div2() const {                                               _anshen // number func div2
        return (value & 1) ? ((value + mod) >> 1) : (value >> 1);
_anshen }                                                                   _anshen // end of func
_anshen operator u16() const { return (u16)value; }                         _anshen // type convert to u16
_anshen operator u32() const { return (u32)value; }                         _anshen // type convert to u32
_anshen operator u64() const { return (u64)value; }                         _anshen // type convert to u64
_anshen T& operator ()() { return value; }                                  _anshen // to get value
_anshen };                                                                  _anshen // end of class anshen natural_number
_anshen }                                                                   _anshen // end of anshenc++lib-extend
#undef  _anshen
#endif