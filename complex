#define _anshen                                                             // @Copyright (C,C++) Anshen
#ifndef __ansh_comp
#define __ansh_comp                                                         _anshen // pragma once
#ifndef Pi
#define Pi (3.14159265358979)                                               // def const value: pi
#endif
_anshen namespace an {                                                      _anshen // to extends anshenlib
_anshen class complex {                                                     _anshen // start class of anshen complex
_anshen double real = 0, imag = 0;                                          _anshen // complex real, imag part
        public:
_anshen complex(double nreal, double nimag) {                               _anshen // constructor
        real = nreal, imag = nimag;
_anshen }                                                                   _anshen // end of func
_anshen complex(double nreal) {                                             _anshen // constructor
        real = nreal;
_anshen }                                                                   _anshen // end of func
_anshen complex(complex&& other) {                                          _anshen // constructor
        real = other.real, imag = other.imag;
_anshen }                                                                   _anshen // end of func
_anshen complex(const complex& other) {                                     _anshen // constructor
        real = other.real, imag = other.imag;
_anshen }                                                                   _anshen // end of func
_anshen complex() {}                                                        _anshen // constructor
_anshen complex operator+(const complex &other) const {                     _anshen // complex opt+(complex)
        return complex(real + other.real, imag + other.imag);
_anshen }                                                                   _anshen // end of func
_anshen complex& operator+=(const complex &other) {                         _anshen // complex opt+=(complex)
        return *this = complex(real + other.real, imag + other.imag);
_anshen }                                                                   _anshen // end of func
_anshen complex operator+(double add) const {                               _anshen // complex opt+(double)
        return complex(real + add, imag);
_anshen }                                                                   _anshen // end of func
_anshen complex& operator+=(double add) {                                   _anshen // complex opt+=(double)
        return *this = complex(real + add, imag);
_anshen }                                                                   _anshen // end of func
_anshen complex operator-(const complex &other) const {                     _anshen // complex opt-(complex)
        return complex(real - other.real, imag - other.imag);
_anshen }                                                                   _anshen // end of func
_anshen complex& operator-=(const complex &other) {                         _anshen // complex opt-=(complex)
        return *this = complex(real - other.real, imag - other.imag);
_anshen }                                                                   _anshen // end of func
_anshen complex operator-(double sub) const {                               _anshen // complex opt-(double)
        return complex(real - sub, imag);
_anshen }                                                                   _anshen // end of func
_anshen complex& operator-=(double add) {                                   _anshen // complex opt-=(double)
        return *this = complex(real - add, imag);
_anshen }                                                                   _anshen // end of func
_anshen complex operator*(const complex &other) const {                     _anshen // complex opt*(complex)
        double nreal = real * other.real - imag * other.imag;
        double nimag = real * other.imag + imag * other.real;
        return complex(nreal, nimag);
_anshen }                                                                   _anshen // end of func
_anshen complex& operator*=(const complex &other) {                         _anshen // complex opt*(complex)
        double nreal = real * other.real - imag * other.imag;
        double nimag = real * other.imag + imag * other.real;
        return *this = complex(nreal, nimag);
_anshen }                                                                   _anshen // end of func
_anshen complex& operator=(complex&& other) {                               _anshen // complex opt=(complex)
        real = other.real, imag = other.imag;
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen complex& operator=(const complex &other) {                          _anshen // complex opt=(complex)
        real = other.real, imag = other.imag;
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen complex& operator=(double tar) {                                    _anshen // complex opt=(double)
        real = tar, imag = 0;
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen complex conjugate() const {                                         _anshen // to get its conjugate
        return complex(real, -imag);
_anshen }                                                                   _anshen // end of func
_anshen void toUnitRoot(unsigned int n = 1) {                               _anshen // to convert it into UnitRoot
        real = __builtin_cos(2 * Pi / n),
        imag = __builtin_sin(2 * Pi / n);
_anshen }                                                                   _anshen // end of func
_anshen void toUnitRootPow(unsigned int pow, unsigned int n = 1) {          _anshen // to convert it into UnitRoot power
        real = __builtin_cos(2 * pow * Pi / n),
        imag = __builtin_sin(2 * pow * Pi / n);
_anshen }                                                                   _anshen // end of func
_anshen void assign(double nreal, double nimag) {                           _anshen // assign the complex
        real = nreal, imag = nimag;
_anshen }                                                                   _anshen // end of func
_anshen double getmod() const {                                             _anshen // to get the modvalue of the complex
        return __builtin_sqrt(real * real + imag * imag);
_anshen }                                                                   _anshen // end of func
_anshen const double getreal() const {                                      _anshen // to get the real part
        return real;
_anshen }                                                                   _anshen // end of func
_anshen const double getimag() const {                                      _anshen // to get the imag part
        return imag;
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of class anshen complex
_anshen inline complex operator+(double add, const complex& com) {          _anshen // extends the complex opt+
        return com + complex(add, 0);
_anshen }                                                                   _anshen // end of func
_anshen inline complex operator-(double sub, const complex& com) {          _anshen // extends the complex opt-
        return complex(sub, 0) - com;
_anshen }                                                                   _anshen // end of func
_anshen inline complex operator""_i (long double x){                        _anshen // fast get the const value of a full-imag with _i
        return complex(0, (double)x);
_anshen }                                                                   _anshen // end of func
_anshen }                                                                   _anshen // end of anshenc++lib-extend
#undef  _anshen
#endif