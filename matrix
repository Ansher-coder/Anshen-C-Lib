#define _anshen                                                             // @Copyright (C,C++) Anshen
#ifndef _ansh_matrix
#define _ansh_matrix                                                        _anshen // pragma once
_anshen namespace an {	                                                    _anshen // to extends anshenlib
#define size_t unsigned int
_anshen template <class T, size_t row, size_t col = row>                    _anshen // <> @T, row, col
_anshen class matrix {                                                      _anshen // start class of anshen matrix
        protected:
_anshen T mat[row][col] = { 0 };                                            _anshen // matrix core pointer
        public:
_anshen constexpr size_t getrow() const { return row; }                     _anshen // matrix get row
_anshen constexpr size_t getcol() const { return col; }                     _anshen // matrix get col
_anshen void indent() {                                                     _anshen // change this into indentity matrix
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] = (T)(r == c);
_anshen }                                                                   _anshen // end of func
_anshen void clear() {                                                      _anshen // clear this
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] = 0;
_anshen }                                                                   _anshen // end of func
_anshen void copy(T srcmat[row][col]) {                                     _anshen // copy other matrix
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] = srcmat[r][c];
_anshen }                                                                   _anshen // end of func
_anshen matrix<T, row, col> operator+(const matrix<T, row, col> &m) {       _anshen // matrix opt+
        matrix<T, row, col> ret;
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                ret.mat[r][c] = mat[r][c] + m.mat[r][c];
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen matrix<T, row, col> operator-(const matrix<T, row, col> &m) {       _anshen // matrix opt-
        matrix<T, row, col> ret;
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                ret.mat[r][c] = mat[r][c] - m.mat[r][c];
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen matrix<T, row, col>& operator+=(const matrix<T, row, col> &m) {     _anshen // matrix opt+=
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] += m.mat[r][c];
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen matrix<T, row, col>& operator-=(const matrix<T, row, col> &m) {     _anshen // matrix opt-=
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] -= m.mat[r][c];
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen matrix<T, row, col>& operator=(const matrix<T, row, col>& m) {      _anshen // matrix opt=
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] = m.mat[r][c];
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen template <size_t ncol>                                              _anshen // <> @ncol as newcol
_anshen matrix<T, row, ncol> operator*(const matrix<T, col, ncol> &m) {     _anshen // matrix opt*
        matrix<T, row, ncol> ret;
        for (size_t r = 0; r < row; ++r)
            for (size_t k = 0; k < ncol; ++k)
                for (size_t c = 0; c < col; ++c)
                    ret.mat[r][k] += mat[r][c] * m.mat[c][k];
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen template <size_t ncol>                                              _anshen // <> @ncol as newcol
_anshen matrix<T, row, ncol>& operator*=(const matrix<T, col, ncol> &m) {   _anshen // matrix opt*=
        matrix<T, row, ncol> ret;
        for (size_t r = 0; r < row; ++r)
            for (size_t k = 0; k < ncol; ++k)
                for (size_t c = 0; c < col; ++c)
                    ret.mat[r][k] += mat[r][c] * m.mat[c][k];
        return *this = ret;
_anshen }                                                                   _anshen // end of func
_anshen matrix<T, row, col> operator^(unsigned long long n) {               _anshen // matrix opt^
        if (row != col) throw "size error, can't pow";
        matrix<T, row, col> ret, tmp;
        tmp = *this, ret.indent();
        while (n) {
        if (n & 1) ret = ret * tmp;
        tmp = tmp * tmp, n >>= 1;
        }
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen matrix<T, row, col>& operator^=(unsigned long long n) {             _anshen // matrix opt^=
        if (row != col) throw "size error, can't pow";
        matrix<T, row, col> ret, tmp;
        tmp = *this, ret.indent();
        while (n) {
        if (n & 1) ret = ret * tmp;
        tmp = tmp * tmp, n >>= 1;
        }
        return *this = ret;
_anshen }                                                                   _anshen // end of func
_anshen T* operator[](size_t r) const {                                     _anshen // matrix opt[]
        if (r >= row) throw "matrix index error";
        return (T*)&mat[r];
_anshen }                                                                   _anshen // end of func       
_anshen T &operator()(size_t r, size_t c) {                                 _anshen // matrix opt()
        if (r >= row || c >= col) throw "matrix index error";
        return mat[r][c];
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of class anshen matrix

_anshen template <class T, size_t row, size_t col = row>                    _anshen // <> @T, row, col
_anshen struct strassen_matrix : matrix<T, row, col> {                      _anshen // start class of anshen strassen matrix
        protected:
_anshen using matrix<T, row, col>::mat;                                     _anshen // matrix core pointer
_anshen static constexpr unsigned int getsize() {                           _anshen // strassen to extends size (must be 2 ^ n)
        size_t val = (row > col ? row : col) - 1;
        val |= val >> 0x01;
        val |= val >> 0x02;
        val |= val >> 0x04;
        val |= val >> 0x08;
        val |= val >> 0x10;
        return ++val;
_anshen }                                                                   _anshen // end of func
_anshen template <size_t size = getsize()>                                  _anshen // <> @size
_anshen void stadd(T a[][size], T b[][size], T res[][size], size_t n) {     _anshen // strassen to add the matrix(array)
        for (size_t r = 0; r < n; r++)
            for (size_t c = 0; c < n; c++)
                res[r][c] = a[r][c] + b[r][c];
_anshen }                                                                   _anshen // end of func
_anshen template <size_t size = getsize()>                                  _anshen // <> @size
_anshen void stsub(T a[][size], T b[][size], T res[][size], size_t n) {     _anshen // strassen to sub the matrix(array)
        for (size_t r = 0; r < n; r++)
            for (size_t c = 0; c < n; c++)
                res[r][c] = a[r][c] - b[r][c];
_anshen }                                                                   _anshen // end of func
_anshen template <size_t size = getsize()>                                  _anshen // <> @size
_anshen void solve(T a[][size], T b[][size], T res[][size], size_t n) {     _anshen // strassen to solve(mul array)
        if (n == 1) return res[0][0] = a[0][0] * b[0][0], void();           // special case : (n = 1)
        size_t divide = n >> 1;
        T a_11[size][size] = { 0 }, a_12[size][size] = { 0 };               // divide block a12
        T a_21[size][size] = { 0 }, a_22[size][size] = { 0 };               // divide block a22
        T b_11[size][size] = { 0 }, b_12[size][size] = { 0 };               // divide block b12
        T b_21[size][size] = { 0 }, b_22[size][size] = { 0 };               // divide block b22
        T r_11[size][size] = { 0 }, r_12[size][size] = { 0 };               // divide block r12
        T r_21[size][size] = { 0 }, r_22[size][size] = { 0 };               // divide block r22
        T p_01[size][size] = { 0 }, p_02[size][size] = { 0 };               // divide block p02
        T p_03[size][size] = { 0 }, p_04[size][size] = { 0 };               // divide block p04
        T p_05[size][size] = { 0 }, p_06[size][size] = { 0 };               // divide block p06
        T p_07[size][size] = { 0 };                                         // divide block p07
        T ares[size][size] = { 0 }, bres[size][size] = { 0 };               // return matrix: b
        for (size_t r = 0; r < divide; r++)
            for (size_t c = 0; c < divide; c++)
                a_11[r][c] = a[r][c],
                a_12[r][c] = a[r][c + divide],
                a_21[r][c] = a[r + divide][c],
                a_22[r][c] = a[r + divide][c + divide],
                b_11[r][c] = b[r][c],
                b_12[r][c] = b[r][c + divide],
                b_21[r][c] = b[r + divide][c],
                b_22[r][c] = b[r + divide][c + divide];
        stadd(a_11, a_22, ares, divide), stadd(b_11, b_22, bres, divide),   // divide and conquer : b11 + b22
        solve(ares, bres, p_01, divide), stadd(a_21, a_22, ares, divide),   // divide and conquer : a21 + a22
        solve(ares, b_11, p_02, divide), stsub(b_12, b_22, bres, divide),   // divide and conquer : b12 - b22
        solve(a_11, bres, p_03, divide), stsub(b_21, b_11, bres, divide),   // divide and conquer : b21 - b11
        solve(a_22, bres, p_04, divide), stadd(a_11, a_12, ares, divide),   // divide and conquer : a11 + a12
        solve(ares, b_22, p_05, divide), stsub(a_21, a_11, ares, divide),   // divide and conquer : a21 - a11
        stadd(b_11, b_12, bres, divide), solve(ares, bres, p_06, divide),   // divide and conquer : p6 = (a21-a11) * (b11+b12)
        stsub(a_12, a_22, ares, divide), stadd(b_21, b_22, bres, divide),   // divide and conquer : b21 + b22
        solve(ares, bres, p_07, divide), stadd(p_03, p_05, r_12, divide),   // divide and conquer : c12 = p3 + p5
        stadd(p_02, p_04, r_21, divide), stadd(p_01, p_04, ares, divide),   // divide and conquer : p1 + p4
        stadd(ares, p_07, bres, divide), stsub(bres, p_05, r_11, divide),   // divide and conquer : c11 = p1 + p4 - p5 + p7
        stadd(p_01, p_03, ares, divide), stadd(ares, p_06, bres, divide);   // divide and conquer : p1 + p3 + p6
        stsub(bres, p_02, r_22, divide);                                    // divide and conquer : c22 = p1 + p3 - p2 + p6
        for (size_t i = 0; i < divide; i++)
            for (size_t j = 0; j < divide; j++)
                res[i][j] = r_11[i][j],
                res[i][j + divide] = r_12[i][j],
                res[i + divide][j] = r_21[i][j],
                res[i + divide][j + divide] = r_22[i][j];
_anshen }                                                                   _anshen // end of func
        public:
_anshen strassen_matrix<T, row, col>                                        _anshen // <> @T,row, col
_anshen operator+(const strassen_matrix<T, row, col> &m) {                  _anshen // matrix opt+
        strassen_matrix<T, row, col> ret;
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                ret.mat[r][c] = mat[r][c] + m.mat[r][c];
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen strassen_matrix<T, row, col>                                        _anshen // <> @T,row, col
_anshen operator-(const strassen_matrix<T, row, col> &m) {                  _anshen // matrix opt-
        strassen_matrix<T, row, col> ret;
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                ret.mat[r][c] = mat[r][c] - m.mat[r][c];
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen strassen_matrix<T, row, col>&                                       _anshen // <> @T,row, col
_anshen operator+=(const strassen_matrix<T, row, col> &m) {                 _anshen // matrix opt+=
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] += m.mat[r][c];
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen strassen_matrix<T, row, col>&                                       _anshen // <> @T,row, col
_anshen operator-=(const strassen_matrix<T, row, col> &m) {                 _anshen // matrix opt-=
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] -= m.mat[r][c];
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen strassen_matrix<T, row, col>&                                       _anshen // <> @T,row, col
_anshen operator=(const strassen_matrix<T, row, col>& m) {                  _anshen // matrix opt=
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                mat[r][c] = m.mat[r][c];
        return *this;
_anshen }                                                                   _anshen // end of func
_anshen template <size_t ncol, size_t size = getsize()>                     _anshen // <> @ncol, size
_anshen strassen_matrix<T, row, col>                                        _anshen // ...
_anshen operator *(strassen_matrix<T, col, ncol> m) {                       _anshen // strassen algorithm to mul matrix
        if (row != col || col != ncol) throw "can't use strassen";
        T tmp0[size][size] = { 0 };
        T tmp1[size][size] = { 0 };
        T tmp2[size][size] = { 0 };
        strassen_matrix<T, row, col> res;
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                tmp0[r][c] = this->mat[r][c],
                tmp1[r][c] = m.mat[r][c];
        solve(tmp0, tmp1, tmp2, size);
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                res.mat[r][c] = tmp2[r][c];
        return res;
_anshen }                                                                   _anshen // end of func
_anshen template <size_t ncol, size_t size = getsize()>                     _anshen // <> @ncol, size
_anshen strassen_matrix<T, row, col>&                                       _anshen // ...
_anshen operator *=(strassen_matrix<T, col, ncol> m) {                      _anshen // strassen algorithm to mul matrix
        if (row != col || col != ncol) throw "can't use strassen";
        T tmp0[size][size] = { 0 };
        T tmp1[size][size] = { 0 };
        T tmp2[size][size] = { 0 };
        strassen_matrix<T, row, col> res;
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                tmp0[r][c] = this->mat[r][c],
                tmp1[r][c] = m.mat[r][c];
        solve(tmp0, tmp1, tmp2, size);
        for (size_t r = 0; r < row; ++r)
            for (size_t c = 0; c < col; ++c)
                res.mat[r][c] = tmp2[r][c];
        return *this = res;
_anshen }                                                                   _anshen // end of func
_anshen template <size_t size = getsize()>                                  _anshen // <>@ ncol, size
_anshen strassen_matrix<T, row, col>                                        _anshen // ...
_anshen operator ^(size_t n) {                                              _anshen // strassen algorithm to pow matrix
        if (row != col) throw "can't use strassen to pow";
        strassen_matrix<T, row, col> ret, tmp;
        tmp = *this, ret.indent();
        while (n) {
        if (n & 1) ret = ret * tmp;
        tmp = tmp * tmp, n >>= 1;
        }
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen template <size_t size = getsize()>                                  _anshen // <>@ ncol, size
_anshen strassen_matrix<T, row, col>&                                       _anshen // ...
_anshen operator ^=(size_t n) {                                             _anshen // strassen algorithm to pow matrix
        if (row != col) throw "can't use strassen to pow";
        strassen_matrix<T, row, col> ret, tmp;
        tmp = *this, ret.indent();
        while (n) {
        if (n & 1) ret = ret * tmp;
        tmp = tmp * tmp, n >>= 1;
        }
        return *this = ret;
_anshen }                                                                   _anshen // end of func
_anshen operator matrix<T, row, col>() {                                    _anshen // operator matrix(), convert to matrix
        matrix<T, row, col> ret;
        ret.copy(this->mat);
        return ret;
_anshen }                                                                   _anshen // end of func
_anshen };                                                                  _anshen // end of class anshen strassen matrix
#undef  size_t
_anshen }                                                                   _anshen // end of anshenc++lib-extend
#undef  _anshen
#endif